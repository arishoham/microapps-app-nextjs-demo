# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

# Workflow syntax reference:
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions
name: PR Build

on:
  # push:
  #   branches: [ main ]
  pull_request:
    branches: [ main ]

# Limit concurrency to 1, with queueing, per workflow
# Limit concurrency to 1, with queueing, per workflow per PR
concurrency:
  group: build-${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: false
env:
  # This is used by the SharedProps to detect a PR build
  PR_NUMBER: ${{ github.event.pull_request.number }}
  AWS_REGION: us-east-2
  APP_NAME: nextjs-demo
  ENV: dev
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID_DEV }}
  DEPLOYER_LAMBDA_NAME: microapps-deployer-dev
  CDK_CONTEXT_ARGS: "--context @pwrdrvr/microapps:s3BucketName=com.pwrdrvr-microapps-dev"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install Node Modules
        run: npm ci

      - name: Install CDK Node Modules
        working-directory: cdk/
        run: npm ci

      - name: Build CDK TypeScript
        working-directory: cdk/
        run: |
          npm run build --if-present

      - name: Extract Current NPM Version
        run: |
          echo 'PACKAGE_VERSION_ORIG='$(node -p -e "require('./package.json').version") >> $GITHUB_ENV

      - name: Compute NPM Version
        run: |
          echo 'PACKAGE_VERSION='${PACKAGE_VERSION_ORIG}-pr.${PR_NUMBER} >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-session-name: microapps-app-serverless-nextjs-demo-build
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/microapps-ghpublic-builder-dev-builder-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Preflight Check Version - App
        run: |
          npx microapps-publish preflight -a ${APP_NAME} -n ${PACKAGE_VERSION} -d ${DEPLOYER_LAMBDA_NAME} --overwrite

      - name: Apply NPM Version
        run: |
          npm version ${PACKAGE_VERSION} --no-git-tag-version

      - name: Apply Next.js Version
        run: |
          npx microapps-publish nextjs-version -n ${PACKAGE_VERSION}

      - name: Build Serverless Next.js
        run: |
          npx serverless

      - name: Copy in Serverless-NextJS-Router
        run: |
          npm run copy-router

      # Prevent the static files from getting pulled into the Lambda
      - name: Remove Static Files from App Build
        run: |
          mkdir .static_files
          mv .serverless_nextjs/assets .static_files
      
      # We are using a shared Sharp node_modules layer
      - name: Remove Sharp from App Build
        run: |
          rm -rf .serverless_nextjs/image-lambda/node_modules

      - name: Deploy CDK Stack
        run: npx cdk deploy ${CDK_CONTEXT_ARGS} --hotswap --require-approval never app
 
      - name: Publish App to MicroApps
        run: |
          npx microapps-publish publish -a ${APP_NAME} -n ${PACKAGE_VERSION} -d ${DEPLOYER_LAMBDA_NAME} -l microapps-app-${APP_NAME}-${ENV}-pr-${PR_NUMBER} -s .static_files/assets/${APP_NAME}/${PACKAGE_VERSION} --overwrite --noCache
