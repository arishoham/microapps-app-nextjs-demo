# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

# Workflow syntax reference:
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions
name: Release Package

on:
  # Pull Request - Only when testing workflow
  # pull_request:
  #   branches: [ main ]
  release:
    types: [published]

  # workflow_dispatch:

jobs:
  release:
    if: startsWith( github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      prSuffix: ${{ steps.prSuffix.outputs.prSuffix }}
      packageVersion: ${{ steps.packageVersion.outputs.packageVersion }}
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
          registry-url: 'https://registry.npmjs.org'

      - name: Install Node Modules
        run: npm ci


      - name: Set git identity
        run: |-
          git config user.name "Automation"
          git config user.email "github-actions@github.com"

      # - name: npm 7 has a bug with from-git, so bump to npm 8
      #   run: npm i -g npm@8
      
      # - name: Print npm version
      #   run: npm --version

      # - name: Bump Version by Patch - Push Tag to GH - Apply to Package.json
      #   run: |
      #     npm version patch
      #     git push â€”-tags

      - name: Apply Version from Git Tag
        run: |
          npm version from-git --no-git-tag-version

      - name: Extract Package Version
        run: |
          echo 'PACKAGE_VERSION='$(node -p -e "require('./package.json').version") >> $GITHUB_ENV

      - name: Apply NPM Version to Everything
        run: |
          npm version ${PACKAGE_VERSION} --no-git-tag-version --allow-same-version --workspaces


      #
      # Do the build
      #
      - name: Link to node_modules - App
        working-directory: packages/app/node_modules
        run: ln -s ../../node_modules/.bin

      - name: Build All TypeScript
        run: npm run build

      - name: Lint
        run: npm run lint


      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::"$(git ls-remote origin -h ${{
          github.ref }} | cut -f1)"

      - name: Apply Next.js Version
        run: |
          npx -w @pwrdrvr/microapps-app-release microapps-publish nextjs-version -n ${PACKAGE_VERSION}

      - name: Build Serverless Next.js
        run: |
          npx -w @pwrdrvr/microapps-app-release serverless

      - name: Copy in Serverless-NextJS-Router
        run: |
          npm run -w @pwrdrvr/microapps-app-release copy-router

      # Remove Sharp package from image-lambda
      # Consumer can install sharp and copy to this location
      # OR Use a shared layer with Sharp in their AWS account
      - name: Remove Sharp from App Build
        working-directory: packages/app/
        run: |
          rm -rf .serverless_nextjs/image-lambda/node_modules

      # Copy the serverless_nextjs build into the Construct output
      # Move static files out of serverless_nextjs
      - name: Zip Package
        run: |
          mv packages/app/.serverless_nextjs packages/cdk-construct/lib
          mv packages/cdk-construct/lib/.serverless_nextjs/assets packages/cdk-construct/lib/.static_files

      # Create the Release on GH now that build has finished
      # - if: ${{ steps.git_remote.outputs.latest_commit == github.sha }}
      #   name: Create Release
      #   run: |
      #     gh release create v${PACKAGE_VERSION} -t v${PACKAGE_VERSION}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #
      # Publish other non-JSII Artifacts to NPM
      #
      # - name: NPM registry authentication
      #   run: npm set //registry.npmjs.org/:_authToken ${{ secrets.NPMJSORG_PUBLISH_TOKEN }}

      - name: Publish CDK Construct
        working-directory: packages/cdk-construct/
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPMJSORG_PUBLISH_TOKEN }}

      # - uses: mikeal/merge-release@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
      #     DEPLOY_DIR: packages/cdk-construct/
      #     SRC_PACKAGE_DIR: packages/cdk-construct/

      # - uses: JS-DevTools/npm-publish@v1
      #   with:
      #     dry-run: true
      #     token: ${{ secrets.NPMJSORG_PUBLISH_TOKEN }}
